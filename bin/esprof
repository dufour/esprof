#!/usr/bin/env node


var fs = require('fs');
var esprof;
try {
    esprof = require('esprof');
} catch (e) {
    esprof = require('../lib/main');
}

var cli = require('commander');

cli
    .version(require("../package").version)
    .usage('[options] <file.js>+')
    .option("-o, --output [file]", "Specify an output file")
    .option("-p, --profiler [file]", "Specify a profiler file to infer required events (overrides command-line switches)");
esprof.EVENTS.forEach(function (e) {
    // cli.option("--" + e, "Enable " + e + " event [true]", true);
    cli.option("--no-" + e, "Disable " + e + " event", false);
});

function parseCmdLine() {
    cli.parse(process.argv);

    if (cli.profiler) {
        var profScript = fs.readFileSync(cli.profiler);
        var events = getEventsFromScript(profScript);
        esprof.EVENTS.forEach(function (e) {
            cli[e] = false;
        });
        events.forEach(function (e) {
            cli[e] = true;
        });
    }
}

function processFile(fname, out) {
    var content = fs.readFileSync(fname, 'utf-8');
    var options = {
        scriptName: fname
    };
    esprof.EVENTS.forEach(function (e) {
        options[e] = cli[e];
    });

    var output = esprof.instrument(content, options);
    out.write(output);
    out.write("\n");
}

function getEventsFromScript(script) {
    var vm = require("vm");
    var context = vm.createContext({});
    var allEvents = "[" + esprof.EVENTS.map(function (s) { return '"' + s + '"'; }) + "]";
    var runtimeOverride = [
        "var esprof = {registeredEvents: []};",
        "esprof.on = function (event, callback) {",
        "   if (event === 'all' || event === 'null') esprof.registeredEvents = " + allEvents + ";",
        "   else if (typeof event === 'string') esprof.registeredEvents.push(event);",
        "   else esprof.registeredEvents = esprof.registeredEvents.concat(event);",
        "};",
        "function esprof$registerCallbacks(events) {",
        "    for (var p in events) {",
        "        esprof.on(p, events[p]);",
        "     }",
        "}"
    ].join("\n");
    vm.runInContext(runtimeOverride, context);
    vm.runInContext(script, context);
    return context.esprof.registeredEvents;
}

function main() {
    parseCmdLine();
    if (cli.args.length === 0) {
        console.error('Error: no input file.');
        cli.help();
    }

    var out;
    if (cli.output) {
        out = require('fs').createWriteStream(cli.output);
    } else {
        out = process.stdout;
    }

    for (var i = 0; i < cli.args.length; i++) {
        processFile(cli.args[i], out);
    }

    if (cli.output) out.end();
}

main();